{"ast":null,"code":"var _jsxFileName = \"C:\\\\ws\\\\react\\\\http\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  async function fetchMoviesHandler() {\n    //async function 은 항상 프로미스를 반환함\n    setIsLoading(true);\n    const response = await fetch('https://swapi.dev/api/films/');\n    const data = await response.json();\n    //await는 async 안에서만 동작하며, 프로미스가 처리될때까지 기다리라는 뜻   \n    const transformedMovies = data.results.map(movieData => {\n      return {\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.release_date\n      };\n      setMovies(transformedMovies);\n      setIsLoading(false);\n    });\n\n    // function fetchMoviesHandler(){\n    //   fetch('https://swapi.dev/api/films/').then(response => {\n    //     return response.json();\n    //   }).then(data => {\n    //     const transformedMovies = data.results.map(movieData => {\n    //       return {\n    //         id: movieData.episode_id,\n    //         title: movieData.title,\n    //         openingText: movieData.opening_crawl,\n    //         releaseDate: movieData.release_date\n    //       };\n    //     });\n    //     setMovies(transformedMovies);\n    //   });\n\n    // }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: fetchMoviesHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    })));\n  }\n}\nexport default App;","map":{"version":3,"names":["React","useState","MoviesList","App","movies","setMovies","isLoading","setIsLoading","fetchMoviesHandler","response","fetch","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date"],"sources":["C:/ws/react/http/src/App.js"],"sourcesContent":["import React, { useState} from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  async function fetchMoviesHandler(){ //async function 은 항상 프로미스를 반환함\n    setIsLoading(true);\n    const response = await fetch('https://swapi.dev/api/films/');\n    const data = await response.json();\n   //await는 async 안에서만 동작하며, 프로미스가 처리될때까지 기다리라는 뜻   \n    const transformedMovies = data.results.map(movieData => {\n      return {\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText: movieData.opening_crawl,\n        releaseDate: movieData.release_date\n      };\n\n    setMovies(transformedMovies);\n    setIsLoading(false);\n     }) ;\n\n\n\n\n  // function fetchMoviesHandler(){\n  //   fetch('https://swapi.dev/api/films/').then(response => {\n  //     return response.json();\n  //   }).then(data => {\n  //     const transformedMovies = data.results.map(movieData => {\n  //       return {\n  //         id: movieData.episode_id,\n  //         title: movieData.title,\n  //         openingText: movieData.opening_crawl,\n  //         releaseDate: movieData.release_date\n  //       };\n  //     });\n  //     setMovies(transformedMovies);\n  //   });\n\n  // }\n  \n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        <MoviesList movies={movies} />\n      </section>\n    </React.Fragment>\n  );\n  }\n\n}\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAO,OAAO;AAEtC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,WAAW;AAElB,SAASC,GAAG,GAAG;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAEjD,eAAeO,kBAAkB,GAAE;IAAE;IACnCD,YAAY,CAAC,IAAI,CAAC;IAClB,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;IAC5D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;IACnC;IACC,MAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAG,CAACC,SAAS,IAAI;MACtD,OAAO;QACLC,EAAE,EAAED,SAAS,CAACE,UAAU;QACxBC,KAAK,EAAEH,SAAS,CAACG,KAAK;QACtBC,WAAW,EAAEJ,SAAS,CAACK,aAAa;QACpCC,WAAW,EAAEN,SAAS,CAACO;MACzB,CAAC;MAEHlB,SAAS,CAACQ,iBAAiB,CAAC;MAC5BN,YAAY,CAAC,KAAK,CAAC;IAClB,CAAC,CAAC;;IAKL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;;IAEA,oBACE,oBAAC,KAAK,CAAC,QAAQ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACb;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACE;MAAQ,OAAO,EAAEC,kBAAmB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,kBAAsB,CAClD,eACV;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACE,oBAAC,UAAU;MAAC,MAAM,EAAEJ,MAAO;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,CACtB,CACK;EAEnB;AAEF;AACA,eAAeD,GAAG"},"metadata":{},"sourceType":"module"}